{"version":3,"sources":["People/People.js","App.js","serviceWorker.js","index.js"],"names":["People","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","people","id","showPeople","getDetails","event","foundguy","findIndex","homosapiens","person","target","persons","setState","togglePeople","deleteGuys","index","newPeople","splice","goo","this","map","guys","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAaeA,G,MAVD,SAACC,GACX,OACI,yBAAKC,UAAU,QAAQC,QAASF,EAAMG,OAClC,uCAAaH,EAAMI,KAAnB,eAAqCJ,EAAMK,IAA3C,KACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UC+DtDO,G,iNAlEbC,MAAQ,CACNC,OAAQ,CACJ,CAACC,GAAG,MAAOV,KAAK,QAAQC,IAAI,IAC5B,CAACS,GAAG,MAAOV,KAAK,OAAOC,IAAI,IAC3B,CAACS,GAAG,OAAQV,KAAK,QAAQC,IAAI,KAE/BU,YAAY,G,EAKhBC,WAAa,SAACC,EAAOH,GACnB,IAAMI,EAAW,EAAKN,MAAMC,OAAOM,WAAU,SAAAC,GAC3C,OAAQA,EAAYN,KAAMA,KAGtBO,EAAO,eAAI,EAAKT,MAAMC,OAAOK,IACnCG,EAAOjB,KAAKa,EAAMK,OAAOZ,MAEzB,IAAMa,EAAQ,YAAI,EAAKX,MAAMC,QAC7BU,EAAQL,GAAUG,EAElB,EAAKG,SAAS,CAACX,OAAQU,K,EAMzBE,aAAe,WACb,EAAKD,SAAS,CAACT,YAAY,EAAKH,MAAMG,c,EAKxCW,WAAW,SAACC,GACV,IAAIC,EAAU,YAAI,EAAKhB,MAAMC,QAC7Be,EAAUC,OAAOF,EAAM,GACvB,EAAKH,SAAS,CAACX,OAAQe,K,wEAEf,IAAD,OACHE,EAAI,KAiBN,OAhBCC,KAAKnB,MAAMG,aAEZe,EAAO,6BACIC,KAAKnB,MAAMC,OAAOmB,KAAI,SAACC,EAAKN,GAC/B,OAAQ,kBAAC,EAAD,CACIO,IAAKD,EAAKnB,GACVV,KAAM6B,EAAK7B,KACXC,IAAK4B,EAAK5B,IACVI,QAAS,SAACQ,GAAD,OAAW,EAAKD,WAAWC,EAAMgB,EAAKnB,YASjE,yBAAKb,UAAU,OACb,8CACA,4BAAQC,QAAS6B,KAAKN,cAAtB,UACCK,O,GA9DOK,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4545d986.chunk.js","sourcesContent":["import React from 'react'\r\nimport './People.css';\r\n\r\nconst People= (props)=>{\r\n    return (\r\n        <div className='peeps' onClick={props.click} > \r\n            <p>Hi! I am {props.name}. My age is {props.age}.</p>\r\n            <p>{props.children}</p> \r\n            <input type=\"text\" onChange={props.changed} value={props.name}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default People;","import React, { Component } from 'react';\nimport People from './People/People'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    people: [\n        {id:'qwq', name:'Aplha',age:13},\n        {id:'wee', name:'Beta',age:34},\n        {id:'weds', name:'Gamma',age:46}\n      ],\n      showPeople: false\n\n  };\n\n\n  getDetails = (event, id) =>{\n    const foundguy = this.state.people.findIndex(homosapiens => {\n      return  homosapiens.id=== id;\n    });\n\n    const person={...this.state.people[foundguy]};\n    person.name=event.target.value;\n    \n    const persons=[...this.state.people]\n    persons[foundguy]=person;\n    \n    this.setState({people: persons})\n  }\n\n\n  \n\n  togglePeople = ()=>{\n    this.setState({showPeople:!this.state.showPeople});\n  }\n\n\n\n  deleteGuys=(index)=>{\n    let newPeople=[...this.state.people];\n    newPeople.splice(index,1);\n    this.setState({people: newPeople})\n  }\n  render() {\n    let goo=null;\n    if(this.state.showPeople)\n    {\n      goo = (<div>\n                {this.state.people.map((guys,index) =>{\n              return (<People \n                          key={guys.id} \n                          name={guys.name} \n                          age={guys.age} \n                          changed={(event) => this.getDetails(event,guys.id)} />\n                          // click={() => this.deleteGuys(index)}\n                          )\n                }\n          )\n        }\n      </div>)\n    }\n      return (  \n        <div className='App'>\n          <h1>List of People</h1>\n          <button onClick={this.togglePeople}>Change</button>\n          {goo}\n        </div>\n      )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}